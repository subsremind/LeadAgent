
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") 
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../src/zod"
  createInputTypes = false
  addIncludeType   = false
  addSelectType    = false
}

generator json {
  provider = "prisma-json-types-generator"
}

model User {
  id                 String       @id
  name               String
  email              String
  emailVerified      Boolean
  image              String?
  createdAt          DateTime
  updatedAt          DateTime
  username           String?
  role               String?
  banned             Boolean?
  banReason          String?
  banExpires         DateTime?
  onboardingComplete Boolean      @default(false)
  paymentsCustomerId String?
  locale             String?
  timezone           String?
  sessions           Session[]
  accounts           Account[]
  passkeys           Passkey[]
  invitations        Invitation[]
  purchases          Purchase[]
  memberships        Member[]
  aiChats            AiChat[]
  categories         Category[]
  subscriptions      Subscription[]
  subscriptionAlerts SubscriptionAlert[]

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  activeOrganizationId String?

  token     String
  createdAt DateTime
  updatedAt DateTime

  @@unique([token])
  @@map("session")
}

model Account {
  id           String    @id
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String? @db.Text
  refreshToken String? @db.Text
  idToken      String? @db.Text
  expiresAt    DateTime?
  password     String?

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String   @db.Text
  expiresAt  DateTime

  createdAt DateTime?
  updatedAt DateTime?

  @@map("verification")
}

model Passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime?

  @@map("passkey")
}

model Organization {
  id                 String       @id
  name               String
  slug               String?
  logo               String?
  createdAt          DateTime
  metadata           String?
  paymentsCustomerId String?
  members            Member[]
  invitations        Invitation[]
  purchases          Purchase[]
  aiChats            AiChat[]
  categories         Category[]
  subscriptions      Subscription[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@unique([userId, organizationId])
  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

enum PurchaseType {
  SUBSCRIPTION
  ONE_TIME
}

model Purchase {
  id             String        @id @default(cuid())
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?
  type           PurchaseType
  customerId     String
  subscriptionId String?       @unique
  productId      String
  status         String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([subscriptionId])
}

model AiChat {
  id             String        @id @default(cuid())
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  title          String?
  /// [AIChatMessages]
  messages       Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Category {
  id        String       @id  @default(cuid())
  name      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  subscriptions Subscription[]
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("category")
}


enum CycleType {
  Daily
  Weekly
  Monthly
  Yearly
}

model Tag {
  id        String       @id @default(cuid())
  name      String
  createdAt DateTime      @default(now())
  subscriptions Subscription[]    @relation("SubscriptionTags")
  subscriptionTags SubscriptionTag[]

  @@map("tag")
}

model SubscriptionTag {
  id             String       @id @default(cuid())
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  tagId          String
  tag            Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())


  @@unique([subscriptionId, tagId])
  @@map("subscription_tag")
}



model Subscription {
  id                 String       @id @default(cuid())
  company            String
  description        String?
  frequency          Int
  value              Decimal? @db.Decimal(10, 2)
  currency           String   @db.VarChar(3)
  cycle              CycleType
  type               String   @db.VarChar(30)
  recurring          Boolean @default(true)
  nextPaymentDate  DateTime?
  contractExpiry    DateTime?
  urlLink           String
  paymentMethod     String? @db.VarChar(30)
  categoryId         String?
  category           Category?      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  tags        Tag[]               @relation("SubscriptionTags")
  subscriptionTags SubscriptionTag[]
  notes              String?
  notesIncluded     Boolean @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionAlerts SubscriptionAlert[]
  subscriptionAlertRecords SubscriptionAlertRecord[]

  @@map("subscription")
}

model EditHistory {
  id         String   @id @default(cuid())
  tableName  String
  tableField String
  tableId    String
  fromValue  String
  toValue    String
  createdBy  String
  createdAt  DateTime @default(now())

  @@map("edit_history")
}

model SubscriptionAlert {
  id             String       @id @default(cuid())
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  intervalValue  Int
  intervalUnit   String
  onField        String
  contact        String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  userId         String?
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionAlertRecords SubscriptionAlertRecord[]

  @@map("subscription_alert")
}

model SubscriptionAlertRecord {
  id                  String            @id @default(cuid())
  subscriptionId      String
  subscription        Subscription      @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  subscriptionAlertId String
  subscriptionAlert   SubscriptionAlert @relation(fields: [subscriptionAlertId], references: [id], onDelete: Cascade)
  contract            String
  content             String
  status              String
  createdAt           DateTime          @default(now())

  @@map("subscription_alert_record")
}


