
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") 
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../src/zod"
  createInputTypes = false
  addIncludeType   = false
  addSelectType    = false
}

generator json {
  provider = "prisma-json-types-generator"
}

model User {
  id                 String       @id
  name               String
  email              String
  emailVerified      Boolean
  image              String?
  createdAt          DateTime
  updatedAt          DateTime
  username           String?
  role               String?
  banned             Boolean?
  banReason          String?
  banExpires         DateTime?
  onboardingComplete Boolean      @default(false)
  paymentsCustomerId String?
  locale             String?
  timezone           String?
  sessions           Session[]
  accounts           Account[]
  passkeys           Passkey[]
  invitations        Invitation[]
  purchases          Purchase[]
  memberships        Member[]
  aiChats            AiChat[]
  categories         Category[]
  subscriptions      Subscription[]
  subscriptionAlerts SubscriptionAlert[]

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  activeOrganizationId String?

  token     String
  createdAt DateTime
  updatedAt DateTime

  @@unique([token])
  @@map("session")
}

model Account {
  id           String    @id
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String? @db.Text
  refreshToken String? @db.Text
  idToken      String? @db.Text
  expiresAt    DateTime?
  password     String?

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String   @db.Text
  expiresAt  DateTime

  createdAt DateTime?
  updatedAt DateTime?

  @@map("verification")
}

model Passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime?

  @@map("passkey")
}

model Organization {
  id                 String       @id
  name               String
  slug               String?
  logo               String?
  createdAt          DateTime
  metadata           String?
  paymentsCustomerId String?
  members            Member[]
  invitations        Invitation[]
  purchases          Purchase[]
  aiChats            AiChat[]
  categories         Category[]
  subscriptions      Subscription[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@unique([userId, organizationId])
  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

enum PurchaseType {
  SUBSCRIPTION
  ONE_TIME
}

model Purchase {
  id             String        @id @default(cuid())
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?
  type           PurchaseType
  customerId     String
  subscriptionId String?       @unique
  productId      String
  status         String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([subscriptionId])
}

model AiChat {
  id             String        @id @default(cuid())
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  title          String?
  /// [AIChatMessages]
  messages       Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model EditHistory {
  id         String   @id @default(cuid())
  tableName  String
  tableField String
  tableId    String
  fromValue  String
  toValue    String
  createdBy  String
  createdAt  DateTime @default(now())

  @@map("edit_history")
}

model Category {
  id        String       @id  @default(cuid())
  name      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  businessId  String?
  businessType String?
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([businessId, businessType])
  @@map("category")
}

// 定义Reddit帖子模型，包含向量字段用于AI处理
model RedditPost {
  // 主键，自增ID
  id Int @id @default(autoincrement())
  categoryId         String?
  category           Category?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  // Reddit平台的原生ID（通常是字符串格式）
  redditId String @unique
  title         String   // 帖子标题
  selftext      String?  // 正文内容（可能为空）
  url           String?  // 外部链接或帖子 URL
  permalink     String?  // 相对链接
  author        String?  // 发帖人
  subreddit     String?  // 所属 subreddit
  ups           Int      @default(0)  // 点赞数
  downs         Int      @default(0)  // 点踩数
  score         Int      @default(0)  // 综合得分
  numComments   Int      @default(0)  // 评论数，Prisma推荐使用驼峰命名
  createdUtc    BigInt?  // 发帖时间（Unix 时间戳），Prisma推荐使用驼峰命名
  postHint      String?  // 帖子类型提示
  
  // 向量字段，用于存储文本嵌入向量
  // 长度可以根据实际使用的嵌入模型调整（如OpenAI的ada-002是1536维）
  embedding Float[] @db.Vector(1536)
  
  // 记录创建时间（本地数据库记录）
  recordCreatedAt DateTime @default(now())
  // 记录最后更新时间（本地数据库记录）
  recordUpdatedAt DateTime @updatedAt

  @@map("reddit_post")
}




