
datasource db {
  provider  = "postgresql"
  url       = "postgresql://postgres.fepbvlwywijtpfyjmequ:afMzr8su6tv3Lu1g@aws-1-us-east-2.pooler.supabase.com:6543/postgres?pgbouncer=true"
  directUrl = "postgresql://postgres.fepbvlwywijtpfyjmequ:afMzr8su6tv3Lu1g@aws-1-us-east-2.pooler.supabase.com:5432/postgres"
  extensions = [pgvector(map: "vector", schema: "extensions")]
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../src/zod"
  createInputTypes = false
  addIncludeType   = false
  addSelectType    = false
}

generator json {
  provider = "prisma-json-types-generator"
}

model User {
  id                 String       @id
  name               String
  email              String
  emailVerified      Boolean
  image              String?
  createdAt          DateTime
  updatedAt          DateTime
  username           String?
  role               String?
  banned             Boolean?
  banReason          String?
  banExpires         DateTime?
  onboardingComplete Boolean      @default(false)
  paymentsCustomerId String?
  locale             String?
  timezone           String?
  sessions           Session[]
  accounts           Account[]
  passkeys           Passkey[]
  invitations        Invitation[]
  purchases          Purchase[]
  memberships        Member[]
  aiChats            AiChat[]
  agentSettings      AgentSetting[]
  aiAnalyzeRecords   AiAnalyzeRecord[]

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  activeOrganizationId String?

  token     String
  createdAt DateTime
  updatedAt DateTime

  @@unique([token])
  @@map("session")
}

model Account {
  id           String    @id
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String? @db.Text
  refreshToken String? @db.Text
  idToken      String? @db.Text
  expiresAt    DateTime?
  password     String?

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String   @db.Text
  expiresAt  DateTime

  createdAt DateTime?
  updatedAt DateTime?

  @@map("verification")
}

model Passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime?

  @@map("passkey")
}

model Organization {
  id                 String       @id
  name               String
  slug               String?
  logo               String?
  createdAt          DateTime
  metadata           String?
  paymentsCustomerId String?
  members            Member[]
  invitations        Invitation[]
  purchases          Purchase[]
  aiChats            AiChat[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@unique([userId, organizationId])
  @@map("member")
}

model Invitation {
  id             String       @id
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

enum PurchaseType {
  SUBSCRIPTION
  ONE_TIME
}

model Purchase {
  id             String        @id @default(cuid())
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String?
  type           PurchaseType
  customerId     String
  subscriptionId String?       @unique
  productId      String
  status         String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([subscriptionId])
}

model AiChat {
  id             String        @id @default(cuid())
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String?
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  title          String?
  /// [AIChatMessages]
  messages       Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model AIRequestLog {
  id                String    @id @default(cuid())   // 全局唯一主键
  userId            String?                       // 可选
  organizationId    String?                       // 可选
  model             String
  business          String
  promptTokens      BigInt                        // 大整数，防止溢出
  completionTokens  BigInt
  totalTokens       BigInt
  cost              Float?                        // 可选，单位：元/美元等
  duration          Int                           // 单位：毫秒
  success           Boolean
  error             String?                       // 失败时记录错误信息
  timestamp         DateTime   @default(now())    // 发生时间

  @@index([business])
  @@map("ai_request_log")
}

model Category {
  id        String       @id  @default(cuid())
  name      String
  path      String
  platform  String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("category")
}

model RedditPost {
  id            String      @id @default(cuid())
  categoryId    String?
  redditId      String   @unique @db.Text
  title         String   @db.Text
  selftext      String?  @db.Text
  url           String?  @db.Text
  permalink     String?  @db.Text
  author        String?  @db.Text
  subreddit     String?  @db.Text
  ups           Int      @default(0)
  downs         Int      @default(0)
  score         Int      @default(0)
  numComments   Int      @default(0) 
  createdUtc    DateTime? 
  embedding     Unsupported("vector(1536)")? 
  recordCreatedAt DateTime @default(now()) 
  recordUpdatedAt DateTime @updatedAt 

  aiAnalyzeRecords AiAnalyzeRecord[]

  @@map("reddit_post")
}

model AgentSetting {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  description String   @db.Text
  subreddit   String?  @db.Text
  query       String   @db.Text
  embedding   Unsupported("vector(1536)")? 
  createdAt   DateTime @default(now()) 
  updatedAt   DateTime @updatedAt 

  @@map("agent_setting")
}

model AiAnalysisResult {
  id        String   @id @default(uuid())
  similarityScore    Float?
  rerankerScore      Float?
  mspAutomationInsight String?
  llmResult          Json?
  title              String?
  selftext           String?
  redditId           String?

  @@map("ai_analysis_results")
}

model AiAnalyzeRecord {
  id        String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  redditId  String?  @map("reddit_id")
  redditPost  RedditPost?     @relation(fields: [redditId], references: [redditId], onDelete: Cascade)
  categoryId	String?
  confidence Float?
  result    Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@unique([userId, redditId])
  @@map("ai_analyze_record")
}

model integrationAuth {
  id String   @id @default(uuid())
  accessToken String?
  refreshToken String?
  tokenType String?
  expiresAt String?
  scope String?
  type String?
  createdAt   DateTime @default(now()) 
  updatedAt   DateTime @updatedAt 
  
  @@map("integrationAuth")
}
